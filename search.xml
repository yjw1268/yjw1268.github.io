<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>通信系统建模与仿真——软件无线电基础、测量、案例及5G</title>
      <link href="/2021/03/01/handout/"/>
      <url>/2021/03/01/handout/</url>
      
        <content type="html"><![CDATA[<h1 id="通信系统建模与仿真——软件无线电基础、测量、案例及5G"><a href="#通信系统建模与仿真——软件无线电基础、测量、案例及5G" class="headerlink" title="通信系统建模与仿真——软件无线电基础、测量、案例及5G"></a>通信系统建模与仿真——软件无线电基础、测量、案例及5G</h1><h2 id="软件无线电基础"><a href="#软件无线电基础" class="headerlink" title="软件无线电基础"></a>软件无线电基础</h2><h3 id="软件无线电的核心理念"><a href="#软件无线电的核心理念" class="headerlink" title="软件无线电的核心理念"></a>软件无线电的核心理念</h3><p>构造一个具有开放性、标准化、模块化的通用硬件平台，将各种功能，如工作频段、调制解调类型、数据格式、加密模式、通信协议等用软件来完成，并使A/D和D/A转换器尽可能靠近天线，以研制出具有高度灵活性、开放性的新一代无线通信系统。</p><h3 id="软件无线电的核心技术"><a href="#软件无线电的核心技术" class="headerlink" title="软件无线电的核心技术"></a>软件无线电的核心技术</h3><ul><li>技术数字化             – ADC及DAC的广泛应用</li><li>平台通用化             – 高速ADC/DAC + DSP + FPGA</li><li>功能虚拟化             – 软件定义</li><li>结构总线化＋模块化    – 定义标准化结构及接口</li><li>控制网络化 </li><li>体系标准化</li></ul><h3 id="软件无线电的定义"><a href="#软件无线电的定义" class="headerlink" title="软件无线电的定义"></a>软件无线电的定义</h3><p>软件定义无线电 (SDR) 的定义：其数字化是在天线端（或者非常接近）进行，无线电所需要的所有处理通过驻留在高速数字信号处理单元中的软件来实现－－理想的软件无线电</p><h3 id="软件无线电的特征"><a href="#软件无线电的特征" class="headerlink" title="软件无线电的特征"></a>软件无线电的特征</h3><ul><li>数字化是在天线端（或者非常接近）进行</li><li>大动态范围</li><li>多波段</li><li>多模式</li><li>软件不仅定义处理功能，也定义结构、模式和波段</li></ul><h3 id="软件无线电的系统描述"><a href="#软件无线电的系统描述" class="headerlink" title="软件无线电的系统描述"></a>软件无线电的系统描述</h3><p><img src="https://i.loli.net/2021/03/01/7VLdsTYIeq4E8va.png" alt=""></p><h2 id="频谱测量及实际案例"><a href="#频谱测量及实际案例" class="headerlink" title="频谱测量及实际案例"></a>频谱测量及实际案例</h2><h3 id="信号的时域观测：幅度-vs-时间"><a href="#信号的时域观测：幅度-vs-时间" class="headerlink" title="信号的时域观测：幅度 vs 时间"></a>信号的时域观测：幅度 vs 时间</h3><h4 id="简单例子-正弦波"><a href="#简单例子-正弦波" class="headerlink" title="简单例子: 正弦波"></a>简单例子: 正弦波</h4><ul><li>纵轴为幅度</li><li>横轴为时间</li><li>频率为周期的倒数   (F = 1/T)</li></ul><p><img src="https://i.loli.net/2021/03/01/xmIcHTRAelj7ntJ.png" alt=""></p><h3 id="信号的频域观测：幅度-vs-频率"><a href="#信号的频域观测：幅度-vs-频率" class="headerlink" title="信号的频域观测：幅度 vs 频率"></a>信号的频域观测：幅度 vs 频率</h3><h4 id="简单例子-正弦波-1"><a href="#简单例子-正弦波-1" class="headerlink" title="简单例子: 正弦波"></a>简单例子: 正弦波</h4><ul><li>纵轴为RMS幅度</li><li>横轴为频率</li></ul><h4 id="频谱分析仪实际上为指定频率的功率计"><a href="#频谱分析仪实际上为指定频率的功率计" class="headerlink" title="频谱分析仪实际上为指定频率的功率计"></a>频谱分析仪实际上为指定频率的功率计</h4><!-- $$P=\frac{A^2}{(R*\sqrt2)}$$ --><p><img src="https://i.loli.net/2021/03/02/lPzZ62tO1M4dU85.png" alt=""></p><h3 id="同一个信号不同观测维度"><a href="#同一个信号不同观测维度" class="headerlink" title="同一个信号不同观测维度"></a>同一个信号不同观测维度</h3><ul><li>注意 – 电子不知道他们正在被什么设备进行观测</li><li>简单的正弦波例子<br><img src="https://i.loli.net/2021/03/01/xuFr2jQTmRqgpsn.png" alt=""></li></ul><h3 id="更多的例子-——-方波"><a href="#更多的例子-——-方波" class="headerlink" title="更多的例子 —— 方波"></a>更多的例子 —— 方波</h3><p>方波由许多正弦波构建而成<br><img src="https://i.loli.net/2021/03/01/KpvAryB35ag4CmY.png" alt=""></p><h3 id="所有信号都可由一组正弦波构建而成"><a href="#所有信号都可由一组正弦波构建而成" class="headerlink" title="所有信号都可由一组正弦波构建而成"></a>所有信号都可由一组正弦波构建而成</h3><p><img src="https://i.loli.net/2021/03/01/LPVID9Jytsx1Qec.png" alt=""></p><h3 id="更多的例子"><a href="#更多的例子" class="headerlink" title="更多的例子"></a>更多的例子</h3><p><img src="https://i.loli.net/2021/03/01/PKlyDObfJtQ62gE.png" alt=""></p><h3 id="为什么要在频域观测信号？"><a href="#为什么要在频域观测信号？" class="headerlink" title="为什么要在频域观测信号？"></a>为什么要在频域观测信号？</h3><h4 id="噪声"><a href="#噪声" class="headerlink" title="噪声"></a>噪声</h4><ul><li>任何东西都会产生噪声，它对整体设计的影响如何?</li><li>噪声的来源? (EMI)</li><li>信号对噪声的测量</li></ul><h4 id="失真"><a href="#失真" class="headerlink" title="失真"></a>失真</h4><ul><li>原则上在示波器上应该是纯净的正弦波可能包含谐波成分，但是在时域上可能并不明显，但是在频域上却能清晰的分辨</li></ul><h4 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h4><ul><li>现代无线通信技术自身源于频域</li><li>频段分配</li><li>定义通信信道</li><li>需要确认诸如占用带宽、调制质量等方面的性能</li></ul><h3 id="重要的频谱分析概念"><a href="#重要的频谱分析概念" class="headerlink" title="重要的频谱分析概念"></a>重要的频谱分析概念</h3><p>中心频率和分析范围 Center Frequency and Span</p><h4 id="示波器FFT典型的分析方式是DC到to-采样率的一半-Hz"><a href="#示波器FFT典型的分析方式是DC到to-采样率的一半-Hz" class="headerlink" title="示波器FFT典型的分析方式是DC到to(采样率的一半)Hz"></a>示波器FFT典型的分析方式是DC到to(采样率的一半)Hz</h4><p><img src="https://i.loli.net/2021/03/01/56OHJGxTaweUgKm.png" alt=""></p><h4 id="频谱分析仪的典型方法是设定一个中心频率CF-因为它在屏幕显示的中心"><a href="#频谱分析仪的典型方法是设定一个中心频率CF-因为它在屏幕显示的中心" class="headerlink" title="频谱分析仪的典型方法是设定一个中心频率CF(因为它在屏幕显示的中心)"></a>频谱分析仪的典型方法是设定一个中心频率CF(因为它在屏幕显示的中心)</h4><ul><li>典型的说法中心频率</li></ul><h4 id="在中心频率两侧可以观测的频率区域称作频率范围SPAN"><a href="#在中心频率两侧可以观测的频率区域称作频率范围SPAN" class="headerlink" title="在中心频率两侧可以观测的频率区域称作频率范围SPAN"></a>在中心频率两侧可以观测的频率区域称作频率范围SPAN</h4><p><img src="https://i.loli.net/2021/03/01/wFMm9OgjerT3Pct.png" alt=""></p><h3 id="基本频谱分析仪界面"><a href="#基本频谱分析仪界面" class="headerlink" title="基本频谱分析仪界面"></a>基本频谱分析仪界面</h3><p><img src="https://i.loli.net/2021/03/01/gXl3YtjuM4aLJyh.png" alt=""></p><h3 id="射频核心测量"><a href="#射频核心测量" class="headerlink" title="射频核心测量"></a>射频核心测量</h3><table><thead><tr><th>Measurements</th><th>Description</th></tr></thead><tbody><tr><td>Channel Power</td><td>Is the device transmitting?  On the correct channel?  At the correct power?</td></tr><tr><td>Adjacent Channel Leakage Ratio (ACLR)</td><td>Is the channel transmission spreading into an adjacent channels ?</td></tr><tr><td>Spectral Emissions Mask (SEM)</td><td>A broader check to ensure power stays within the intended channel</td></tr><tr><td>Spurious, Harmonics, Intermodulation</td><td>Is the device creating miscellaneous noise which may interfere with itself or others?</td></tr><tr><td>EMI Testing</td><td>What levels must the device fall within for radiated and conducted emissions so that it doesn’t interfere with others and can pass compliance?</td></tr><tr><td>Modulation Quality</td><td>Is the device talking clearly so that other receivers can hear it well?</td></tr><tr><td>Receiver Sensitivity &amp; Blocking</td><td>Can the device receive its desired signals sufficiently and ignore others?</td></tr><tr><td>Impedance / Return Loss /VSWR</td><td>Are the modules impedance-matched so as to optimize operation ?</td></tr></tbody></table><h4 id="Channel-power-aclr"><a href="#Channel-power-aclr" class="headerlink" title="Channel power, aclr"></a>Channel power, aclr</h4><p><img src="https://i.loli.net/2021/03/01/Wv18BQxGACVbznF.png" alt=""></p><h4 id="Spectral-emissions-mask"><a href="#Spectral-emissions-mask" class="headerlink" title="Spectral emissions mask"></a>Spectral emissions mask</h4><p><img src="https://i.loli.net/2021/03/01/Y9m4zPp5bO2qAru.png" alt=""></p><h4 id="Spurious-harmonics-intermodulation"><a href="#Spurious-harmonics-intermodulation" class="headerlink" title="Spurious, harmonics, intermodulation"></a>Spurious, harmonics, intermodulation</h4><p><img src="https://i.loli.net/2021/03/01/ksI4ZEFJCSgUOrn.png" alt=""></p><h4 id="EMI-Testing-types-and-limits"><a href="#EMI-Testing-types-and-limits" class="headerlink" title="EMI Testing types and limits"></a>EMI Testing types and limits</h4><p><strong>EMI Pre</strong>-Compliance measurements are an approximation of the EMI signature of a product.  Almost all products that use energy must pass some form of EMI testing.  Products must be certified by an accredited test house before them may be sold in the market.<br><strong>CISPR</strong> - an international body who specify EMI regulations.  SVPC includes CISPR limit lines for many radiated and conducted specifications.</p><table><thead><tr><th>Concern</th><th>Radiated</th><th>Wired (AC power)</th></tr></thead><tbody><tr><td>Am I affecting others?</td><td>- Intentional radiated emissions<br>- Unintentional radiated emissions</td><td>Conducted emissions</td></tr><tr><td>Will I be affected by others?</td><td>electromagnetic susceptibility (EMS)</td><td>&nbsp;</td></tr></tbody></table><h4 id="Modulation-Quality-–-Tx-Fidelity"><a href="#Modulation-Quality-–-Tx-Fidelity" class="headerlink" title="Modulation Quality – Tx Fidelity"></a>Modulation Quality – Tx Fidelity</h4><p><strong>Symbol Table</strong> -  the data being transmitted, as determined by the demodulated signal.<br><strong>Error Vector Magnitude (EVM)</strong> – a numerical calculation of modulation fidelity (how accurate the modulation is); zero is best.<br><strong>Constellation Diagram</strong> – a visual representation of modulation fidelity (how accurate the modulation is); the clearer the diagriam the better.</p><p><img src="https://i.loli.net/2021/03/01/ouI7iZVyOW69TkC.png" alt=""></p><h4 id="Receiver-Sensitivity-and-blocking-test"><a href="#Receiver-Sensitivity-and-blocking-test" class="headerlink" title="Receiver Sensitivity and blocking test"></a>Receiver Sensitivity and blocking test</h4><p><strong>Receiver sensitivity</strong> – how well your receiver can pick up small signals, which affects its range (distance) of operation.  Usually measured as bit-error rate (BER) as a function of received power, or EVM as approximation.<br><strong>Blocking</strong> - how well your receiver can receive the desired signal in the presence of unwanted signals.<br><img src="https://i.loli.net/2021/03/01/iJM1ClgYHBW3dQS.png" alt=""></p><h4 id="Impedance"><a href="#Impedance" class="headerlink" title="Impedance"></a>Impedance</h4><ul><li>Impedance is a combination value which includes resistance and reactance</li><li>Problem:  Impedance is a dynamic value that can change based on  frequency !</li><li>If there is a miss-match, some of the RF power that is being fed into a component (or cable, or antenna) will be reflected back to the source<br><img src="https://i.loli.net/2021/03/01/UNyzt4sCfXmKOJu.png" alt=""></li></ul><h4 id="Voltage-standing-wave-ratio-vswr"><a href="#Voltage-standing-wave-ratio-vswr" class="headerlink" title="Voltage standing wave ratio (vswr)"></a>Voltage standing wave ratio (vswr)</h4><ul><li>We want all the signal energy transferred from the transceiver to the antenna (or component) or vice versa (perfect impedance match at the antenna junction, i.e. a VSWR of 1:1)  </li><li>A short or open would reflect all energy back, creating standing waves in the signal</li><li>Reality is somewhere in between, but hopefully closer to perfect energy transfer! VSWR tells us the amount of energy reflected<br><img src="https://sdr.bupt404.cn/pic/Standing_wave_2.gif" alt=""></li></ul><h3 id="实时频谱发现1"><a href="#实时频谱发现1" class="headerlink" title="实时频谱发现1"></a>实时频谱发现1</h3><p>提高发现偶发信号的概率 – POI</p><ul><li>Wi-Fi信号 + BLE信号<ul><li>时间偶发</li><li>频率同频</li></ul></li></ul><video id="video" controls="" preload="auto" poster="https://sdr.bupt404.cn/pic/wifi-ble1.png"  width=50%><source id="mp4" src="https://sdr.bupt404.cn/pic/wifi-ble1.mp4"></video><video id="video" controls="" preload="auto" poster="https://sdr.bupt404.cn/pic/wifi-ble2.png"  width=50%><source id="mp4" src="https://sdr.bupt404.cn/pic/wifi-ble2.mp4"></video><h3 id="实时频谱发现2"><a href="#实时频谱发现2" class="headerlink" title="实时频谱发现2"></a>实时频谱发现2</h3><ul><li>雷达信号 + 本振泄露<ul><li>频率分布相同</li><li>能量高低不同</li><li>方向纵横交错 – 概率不同</li></ul></li></ul><video id="video" controls="" preload="auto" poster="https://sdr.bupt404.cn/pic/rader1.png" muted='muted' width=50%><source id="mp4" src="https://sdr.bupt404.cn/pic/rader1.mp4"></video><video id="video" controls="" preload="auto" poster="https://sdr.bupt404.cn/pic/rader2.png" width=50% muted='muted' ><source id="mp4" src="https://sdr.bupt404.cn/pic/rader2.mp4"></video><h3 id="实时频谱发现3"><a href="#实时频谱发现3" class="headerlink" title="实时频谱发现3"></a>实时频谱发现3</h3><ul><li>频率上拥挤重叠<ul><li>阻断器</li><li>对抗环境</li></ul></li></ul><video id="video" controls="" preload="auto" poster="https://sdr.bupt404.cn/pic/block.png" width=50% muted='muted'><source id="mp4" src="https://sdr.bupt404.cn/pic/block.mp4"></video><h3 id="案例1：利用-DPX-发现-RFID-信号对-GSM-上行干扰"><a href="#案例1：利用-DPX-发现-RFID-信号对-GSM-上行干扰" class="headerlink" title="案例1：利用 DPX 发现 RFID 信号对 GSM 上行干扰"></a>案例1：利用 DPX 发现 RFID 信号对 GSM 上行干扰</h3><p><img src="https://i.loli.net/2021/03/01/mevTC5tYDVAnOcu.png" alt=""></p><blockquote><p>使用传统频谱仪无法对信号进行准确判断</p></blockquote><p><strong>RFID 门禁915MHz系统干扰GSM上行</strong></p><p><img src="https://i.loli.net/2021/03/01/HYFXau4l7OqVhSQ.png" alt=""></p><h3 id="案例2：XX机场电磁环境测试"><a href="#案例2：XX机场电磁环境测试" class="headerlink" title="案例2：XX机场电磁环境测试"></a>案例2：XX机场电磁环境测试</h3><ul><li>地空通信：AM调制 100MHz</li><li>底噪高：约-90dBm/Hz</li></ul><p><img src="https://i.loli.net/2021/03/01/7KZCtSUFJ5E3dGO.png" alt=""></p><p><img src="https://i.loli.net/2021/03/01/n1Zz3SFjUpg6liK.png" alt=""></p><ul><li>相位分析结果具有一定线性特征、时域波形规整</li><li>“高脉冲”8ms重复一次、“矮脉冲”1ms重复一次</li><li>原因：米波雷达 – 远程预警</li></ul><h2 id="5G通信简介"><a href="#5G通信简介" class="headerlink" title="5G通信简介"></a>5G通信简介</h2><h3 id="5G技术介绍"><a href="#5G技术介绍" class="headerlink" title="5G技术介绍"></a>5G技术介绍</h3><p><img src="https://i.loli.net/2021/03/01/u8jRtzOeiEKcBV6.png" alt=""></p><ul><li>eMBB (enhanced Mobile Broadband)，增强移动宽带</li><li>mMTC (massive Machine Type Communications)，大规模物联网</li><li>URLLC (Ultra-Reliable and Low Latency Communications)，低时延高可靠连接</li></ul><p><img src="https://i.loli.net/2021/03/01/ugYyTbLW5MBtRIJ.png" alt=""></p><ul><li>DU （Distributed Unit），分布单元</li><li>CU （Centralized Unit），集中单元</li><li>MEC （Mobile Edge Computing），移动边缘计算</li><li>NGC （ Next Generation Core），下一代核心网 </li></ul><p><img src="https://i.loli.net/2021/03/01/24FJsUB3vgtOjpd.png" alt=""><br><img src="https://i.loli.net/2021/03/01/RyBn4XwpghTGSxM.png" alt=""></p><p>5G技术极大地提高了网络速度，缩短了连接时间。5G新无线电(NR)是3rd Generation Partnership Project (3GPP) 标准，用于运行在低于7.125 GHz频段(FR1)和高于24.250 GHz毫米波频段(FR2)的无线网络。5G提供每秒千兆比特的数据速率。</p><p>5G网络使用更宽的带宽、更高的工作频率和有源天线系统，如相控阵天线。5G网络部署的关键挑战是描述空中接口路径损耗、优化波束覆盖和减少干扰问题。</p><p><img src="https://i.loli.net/2021/03/01/poEOeKX2f5BGY43.png" alt=""></p><h3 id="我国5G技术频率划分"><a href="#我国5G技术频率划分" class="headerlink" title="我国5G技术频率划分"></a>我国5G技术频率划分</h3><ul><li><p>已商用网络频段</p><ul><li>中国电信：3400MHz-3500MHz</li><li>中国联通：3500MHz-3600MHz</li><li>中国移动：2515MHz-2675MHz、4800MHz-4900MHz</li></ul></li><li><p>已进行频率划分，正在部署的网络频段</p><ul><li>700MHz频段：中国广电网络股份有限公司 （中国广电）</li><li>5.925GHz-7.125GHz/6.425GHz-7.125GHz频段：固定无线接入（FWA）</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WEBSDR指南</title>
      <link href="/2021/02/20/sdrguide/"/>
      <url>/2021/02/20/sdrguide/</url>
      
        <content type="html"><![CDATA[<h1 id="WEBSDR"><a href="#WEBSDR" class="headerlink" title="WEBSDR"></a>WEBSDR</h1><p>WEBSDR将本地收听的电台信号共享到互联网上，让您可以随时随地选择频率收听FM电台。网站也附带了实时接收的频谱与瀑布图，是学习通信、信号处理的优秀平台。</p><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><p>我们目前使用<code>820T2+RTL2832U</code>USB软件无线电，它支持<code>DVB-T+FM+DAB</code>，最大采样率为3.3MHZ。</p><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><p>软件代码部分使用<code>Python</code>进行IQ数据处理与解调，计划使用<code>WebSocket</code>传输实时数据到服务器上，通过<code>Canvas</code>渲染数据，调用<code>Web Audio API</code>等实时播放音频。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>目前网站是一个实现形式的Demo，还在不断完善中，发现bug欢迎在下方留言。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>支持websdr</title>
      <link href="/2021/02/20/supportwebsdr/"/>
      <url>/2021/02/20/supportwebsdr/</url>
      
        <content type="html"><![CDATA[<h1 id="帮助WEBSDR开发"><a href="#帮助WEBSDR开发" class="headerlink" title="帮助WEBSDR开发"></a>帮助WEBSDR开发</h1><p>WEBSDR是一个正在开发中的项目，目前出于一些限制还有很多开源完善的空间。我们也计划在项目稳定后开放为MIT许可的开源项目，完全免费使用。但是，如果没有适当的资金支持，维护和开发项目新功能所需的工作量将无法持续。</p><h2 id="途径"><a href="#途径" class="headerlink" title="途径"></a>途径</h2><p>您可以通过以下方法支持WEBSDR开发：</p><ol><li>如果您对项目感兴趣，想加入和改进本项目，可以在本页面下方留下联系方式，开发者将会联系您。</li><li>如果您喜欢本项目，可以通过以下渠道捐赠以用于服务器与硬件资费: <ul><li>微信  </li><li>支付宝  </li></ul></li></ol><p>点击文末的<code>赏</code>即可捐赠。</p><h2 id="WEBSDR贡献者"><a href="#WEBSDR贡献者" class="headerlink" title="WEBSDR贡献者"></a>WEBSDR贡献者</h2><p>这个项目的存在要感谢所有贡献者。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WEBSDR简介</title>
      <link href="/2021/02/19/websdr/"/>
      <url>/2021/02/19/websdr/</url>
      
        <content type="html"><![CDATA[<h2 id="我们为什么开发WEBSDR"><a href="#我们为什么开发WEBSDR" class="headerlink" title="我们为什么开发WEBSDR"></a>我们为什么开发WEBSDR</h2><p>2020年是不平凡的一年，突如其来的疫情换来了不一样的教学方式,也引发了对在线教学模式的组织与探索。线上教学上通信系统建模与仿真这门课时候，由于学生在家没有实验设备，老师远程向我们视频展示了通过<code>SDR(Software Defined Radio)</code>收听当地信号并显示频谱等功能，以此为契机我们突发想法：能否将将SDR接入互联网，让大家无论在何处都可以查看与收听信号呢？于是就有了这个项目的雏形。</p><h2 id="这个网站能做什么"><a href="#这个网站能做什么" class="headerlink" title="这个网站能做什么"></a>这个网站能做什么</h2><p>网站是开发者兴趣所向学习之余开发，所有的工作都是开发者课余阅读文档自己写的代码，没有开源软件与代码借鉴。目前网站已经实现了实时捕获信号、实时显示频谱并解调播放的功能。受于目前的服务器与硬件的限制，目前只能解调FM信号并且服务器会有一定的缓存与延迟。</p><h2 id="未来的计划"><a href="#未来的计划" class="headerlink" title="未来的计划"></a>未来的计划</h2><p>在之后的一段时间内，我们将致力于改进服务器与硬件的性能与机制。支持更多的电台需要更大频段范围的硬件设备与软件的接续开发，以后年级的同学如果感兴趣也可以继续滚动开发完成。</p><h3 id="WEBSDR网站"><a href="#WEBSDR网站" class="headerlink" title="WEBSDR网站"></a><a href="http://sdr.bupt404.cn/" target="_blank" rel="noopener">WEBSDR网站</a></h3>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHM课程学习-转子脱落故障预</title>
      <link href="/2020/03/14/phm-ke-cheng-xue-xi-zhuan-zi-tuo-luo-gu-zhang-yu/"/>
      <url>/2020/03/14/phm-ke-cheng-xue-xi-zhuan-zi-tuo-luo-gu-zhang-yu/</url>
      
        <content type="html"><![CDATA[<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><center><iframe src="https://nbviewer.jupyter.org/github/yjw1268/Web-learning/blob/Try/jupyter%20notebook/PHM-2.ipynb" width="100%" height="600"></iframe></center>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHM课程学习一</title>
      <link href="/2020/02/29/phm-ke-cheng-xue-xi-feng-ji-sun-pi/"/>
      <url>/2020/02/29/phm-ke-cheng-xue-xi-feng-ji-sun-pi/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>通过对传感器采集的风机原始数据进行预处理、特征处理、选择机器学习算法等过程后，通过训练集训练，测试集进行评估的方式，构建风机结冰预测模型，并对构建的模型进行评估，得到最终的准确率、精确率、召回率、F-Measure、ROC-Area等评估参数。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://www.phmlearn.com/u/zangml/blogs/35" target="_blank" rel="noopener">原址</a></p><h2 id="可能用得上的知识"><a href="#可能用得上的知识" class="headerlink" title="可能用得上的知识"></a>可能用得上的知识</h2><h3 id="One-Class-SVM"><a href="#One-Class-SVM" class="headerlink" title="One Class SVM"></a>One Class SVM</h3><p>One Class Learning 比较经典的算法是One-Class-SVM，这个算法的思路非常简单，就是寻找一个超平面将样本中的正例圈出来，预测就是用这个超平面做决策，在圈内的样本就认为是正样本。由于核函数计算比较耗时，在海量数据的场景用的并不多。</p><p>另一个算法是基于神经网络的算法，在深度学习中广泛使用的自编码算法可以应用在单分类的问题上，自编码是一个BP神经网络，网络输入层和输出层是一样，中间层数可以有多层，中间层的节点个数比输出层少，最简单的情况就是中间只有一个隐藏层，如下图所示，由于中间层的节点数较少，这样中间层相当于是对数据进行了压缩和抽象，实现无监督的方式学习数据的抽象特征。</p><p>如果我们只有正样本数据，没有负样本数据，或者说只关注学习正样本的规律，那么利用正样本训练一个自编码器，编码器就相当于单分类的模型，对全量数据进行预测时，通过比较输入层和输出层的相似度就可以判断记录是否属于正样本。</p><p>sklearn提供了一些机器学习方法，可用于奇异（Novelty）点或者异常（Outlier）点检测，包括OneClassSVM，Isolation Forest，Local Outlier Factor（LOF）等，其中OneCLassSVM可以用于Novelty Dection，而后两者可用于Outlier Detection。</p><p>严格来说，OneCLassSVM不是一种outlier detection，而是一种novelty detection方法：它的训练集不应该掺杂异常点，因为模型可能会去匹配这些异常点。但在数据维度很高，或者对相关数据分布没有任何假设的情况下，OneClassSVM也可以作为一种很好的outlier detection方法。</p><p>在one-class classification中，仅仅只有一类的信息是可以用于训练，其他类别的（总称outlier）信息是缺失的，也就是区分两个类别的边界线是通过仅有的一类数据的信息学习得到的。</p><blockquote><p>novelty detection<br>当训练数据中没有离群点，我们的目标是用训练好的模型去检测另外发现的新样本</p></blockquote><blockquote><p>outlier  dection<br>当训练数据中包含离群点，模型训练时要匹配训练数据的中心样本，忽视训练样本中的其他异常点。</p></blockquote><h3 id="OneClass-与二分类，多分类的区别"><a href="#OneClass-与二分类，多分类的区别" class="headerlink" title="OneClass 与二分类，多分类的区别"></a>OneClass 与二分类，多分类的区别</h3><p>如果将分类算法进行划分，根据类别个数的不同可以分为单分类，二分类，多分类。常见的分类算法主要解决二分类和多分类问题，预测一封邮件是否是垃圾邮件是一个典型的二分类问题，手写体识别是一个典型的多分类问题，这些算法并不能很好的应用在单分类上，但是单分类问题在工业界广泛存在，由于每个企业刻画用户的数据都是有限的，很多二分类问题很难找到负样本，即使用一些排除法筛选出负样本，负样本也会不纯，不能保证负样本中没有正样本。所以在只能定义正样本不能定义负样本的场景中，使用单分类算法更合适。</p><ul><li><p>单分类算法只关注与样本的相似或者匹配程度，对于未知的部分不妄下结论。</p></li><li><p>典型的二类问题：识别邮件是否是垃圾邮件，一类“是”，一类“不是”。</p></li><li><p>典型的多类问题：人脸识别，每个人对应的脸就是一个类，然后把待识别的脸分到对应的类去。</p></li></ul><p>而OneClassClassification，它只有一个类，属于该类就返回结果“是”，不属于就返回结果“不是”。</p><p>其区别就是在二分类问题中，训练集中就由两个类的样本组成，训练出的模型是一个二分类模型；而OneClassClassification中的训练样本只有一类，因此训练出的分类器将不属于该类的所有其他样本判别为“不是”即可，而不是由于属于另一类才返回“不是”的结果。</p><p>现实场景中的OneCLassClassification例子：现在有一堆某商品的历史销售数据，记录着买该产品的用户信息，此外还有一些没有购买过该产品的用户信息，想通过二分类来预测他们是否会买该产品，也就是两个类，一类是“买”，一类是“不买”。当我们要开始训练二分类器的时候问题来了，一般来说没买的用户数会远远大于已经买了的用户数，当将数据不均衡的正负样本投入训练时，训练出的分类器会有较大的bisa（偏向值）。因此，这时候就可以使用OneClassClassification 方法来解决，即训练集中只有已经买过该产品的用户数据，在识别一个新用户是否会买该产品时，识别结果就是“会”或者“不会”。</p><h3 id="sklearn实现"><a href="#sklearn实现" class="headerlink" title="sklearn实现"></a>sklearn实现</h3><p><strong>参数</strong></p><ul><li>kernel：核函数（一般使用高斯核）</li><li>nu：设定训练误差(0, 1]，表示异常点比例，默认值为0.5</li></ul><p><strong>方法</strong></p><ul><li><p>fit(X)：训练，根据训练样本和上面两个参数探测边界。（注意是无监督）</p></li><li><p>predict(X)：返回预测值，+1就是正常样本，-1就是异常样本。</p></li><li><p>decision_function(X)：返回各样本点到超平面的函数距离（signed distance），正的维正常样本，负的为异常样本。</p></li><li><p>set_params(**params)：设置这个评估器的参数，该方法适用于简单估计器以及嵌套对象（例如管道）。</p></li><li><p>get_params([deep])：获取这个评估器的参数。</p></li><li><p>fit_predict(X[, y])：在X上执行拟合并返回X的标签，对于异常值，返回 -1 ，对于内点，返回1。</p></li></ul><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><center><iframe src="https://nbviewer.jupyter.org/github/yjw1268/Web-learning/blob/Try/jupyter%20notebook/PHM-1.ipynb" width="100%" height="600"></iframe></center>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda使用的相关问题</title>
      <link href="/2020/02/27/anaconda-shi-yong-de-xiang-guan-wen-ti/"/>
      <url>/2020/02/27/anaconda-shi-yong-de-xiang-guan-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><h2 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h2><blockquote><p>问题描述：在用 Anaconda 安装包时遇到无法定位程序输入点于……动态链接库的问题</p></blockquote><p>解决方法：</p><ol><li>找到 Anaconda 安装路径：</li><li>进入 <code>\DLLs</code> 文件夹，查看 <code>libcrypto-1_1-x64.dll</code> 文件的修改日期</li><li>进入 <code>\Library\bin</code> 文件夹，查看 <code>libcrypto-1_1-x64.dll</code> 文件修改日期</li><li>如果两文件修改日期不同，用 DLLS文件夹下的 <code>libcrypto-1_1-x64.dll</code> 替换 bin文件夹下的 <code>libcrypto-1_1-x64.dll</code></li><li>重新尝试安装</li></ol><p>效果：<br>替换文件之后确实可以解决“无法定位程序输入点”的问题，但再安装其他package时，会再次出现相同的问题，再次查看文件修改日期，发现两个文件夹下 libcrypto-1_1-x64.dll 的日期又不一致了，需要重新替换</p><p>*有时也需更换<code>libssl-1_1-x64.dll</code>文件。</p><h2 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h2><blockquote><p>Jupyter Notebook出现kernel error FileNotFoundError: [WinError 2] 系统找不到指定的文件</p></blockquote><p>解决办法：</p><ol><li>在cmd 使用jupyter kernelspec list查看安装的内核和位置</li><li>进入安装内核目录打开kernel.jason文件，查看Python编译器的路径是否正确</li><li>修改编译器至正确的Anaconda环境的python编译器路径</li></ol>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>multiprocessing在Windows环境编译器下的问题</title>
      <link href="/2020/02/02/python-multiprocessing-zai-windows-bian-yi-qi-xia-de-wen-ti/"/>
      <url>/2020/02/02/python-multiprocessing-zai-windows-bian-yi-qi-xia-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="一个久未解决的问题"><a href="#一个久未解决的问题" class="headerlink" title="一个久未解决的问题"></a>一个久未解决的问题</h2><p>运行环境：</p><pre><code>操作系统：Windows 10 10.0版本:10.0.17763 版本 17763处理器：Intel(R) Core(TM) i7-8750H CPU @ 2.20GHz，2208 Mhz，6 个内核，12 个逻辑处理器编译器：PyCharm 2018.3.4 (Community Edition)Build：#PC-183.5429.31, built on January 29, 2019Python：3.7.0</code></pre><p>在学习多进程的时候，<code>multiprocessing</code>模块就是跨平台版本的多进程模块。<code>multiprocessing</code>模块提供了一个<code>Process</code>类来代表一个进程对象，代码可以在编译器中直接运行：(找了一个简单的吐槽版代码)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">action</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 待会两个进程要执行的任务↓</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 循环30次</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 等待0.1s</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 这行代码很重要，新建进程</span>    jc1 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>action<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'进程一'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 准备建立一个进程：multiprocessing.Process()</span>    jc2 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>action<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'进程二'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 再准备建立一个新进程，这是基本格式记住←</span>    <span class="token comment" spellcheck="true"># 必要参数target:指定进程要执行的任务(这里是执行函数 action),必要参数args:直译成中文就是'参数'，顾名思义就是前面target的参数，即action的参数，注意args是个元组，所以args后的参数写成tuple元组格式。直接写target('进程一',0)一定报错的</span>    jc1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将蓄势待发的jc1进程正式启动！！</span>    jc2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 同上...</span>    jc1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 等待进程jc1将任务执行完...</span>    jc2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ...</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'jc1,jc2任务都已执行完毕'</span><span class="token punctuation">)</span>    jc1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 彻底关闭进程jc1</span>    jc2<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ...</span></code></pre><p>输出：</p><pre><code>进程一   0进程二   1进程一   0进程二   1进程一   0进程二   1...</code></pre><p>但是，当我们使用pool时，如：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool<span class="token keyword">import</span> multiprocessing<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token operator">*</span>x<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    multiprocessing<span class="token punctuation">.</span>freeze_support<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> Pool<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">as</span> p<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>map<span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>则无任何输出，进程卡死。但是如果用cmd运行：</p><pre class=" language-bash"><code class="language-bash">python main.py</code></pre><p>则很快会显示输出：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>1, 4, 9<span class="token punctuation">]</span></code></pre><h2 id="一些解释"><a href="#一些解释" class="headerlink" title="一些解释"></a>一些解释</h2><p>因为Windows缺乏linix的fork, 所以它会有一些额外的限制:</p><ul><li>不管是绑定还是未绑定的方法, 都不要直接作为参数传给Process初始化的target, 相反应该要用普通的函数代替</li><li>子进程在访问全局变量时, 可能会与父进程的值不同. ( 模块级别的常量没这问题 )</li><li>开启新Python解析器或者创建新process时, 确定主模块能够安全的导入.<br>也有文章说要加入multiprocessing.freeze_support()函数，但是试了一下没有成功。<br>为此，尝试以下试验：</li></ul><ol><li>使用python3.7+VS Code，可以运行。</li><li>使用python3.6+Pycharm，无法运行。</li><li>结合python3.7+pycharm，无法运行的结果，<br>最终根据以上试验，确认原因应该是<strong>pycharm与python3.7不兼容原因</strong>。（不知道有没有解决方法，先改用VS Code吧）</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>酷Q机器人Windows部署</title>
      <link href="/2020/01/31/ku-q-ji-qi-ren-bu-shu/"/>
      <url>/2020/01/31/ku-q-ji-qi-ren-bu-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>酷Q是一个QQ机器人，可以接入QQ中进行收发消息权限管理等，目前有两个版本：</p><ul><li><a href="https://cqp.cc/t/23253#pid873447" target="_blank" rel="noopener">酷Q Air</a> 继承了老版本（酷Q Lite）简单快速、扩展性强的特点。使用了更强大的 V9 应用机制，并坚持免费，是一个轻巧、免费、高效的机器人核心，功能需要安装“应用”实现。</li><li><a href="https://cqp.cc/t/14901" target="_blank" rel="noopener">酷Q Pro</a>的功能更加强大，捐助开发者可以获取授权时长</li></ul><p>可惜我的服务器Centos版本老旧，支持不了Docker，故现在Windows上试试水。<br>两者功能对比：<img src="https://sr.cqp.me/compare2.png" width="30%" style="margin: 0 auto;"/></p><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><ol><li>酷Q</li><li><a href="https://github.com/richardchien/coolq-http-api/releases" target="_blank" rel="noopener">CoolQ HTTP API 插件</a></li><li>NoneBot  <pre class=" language-bash"><code class="language-bash"> pip <span class="token function">install</span> nonebot</code></pre></li></ol><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li><p>将CoolQ HTTP API 插件最新的 cpk 文件放到 酷Q 的 app 文件夹，然后启用即可。由于要上报事件、接受调用请求，因此需要所有权限。首次启用酷Q可以按步骤进行新手教程。</p></li><li><p>使用编辑器或 IDE，创建一个名为 <code>bot.py</code> 的文件，内容如下:</p><pre class=" language-python"><code class="language-python"> <span class="token keyword">import</span> nonebot <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>     nonebot<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>     nonebot<span class="token punctuation">.</span>load_builtin_plugins<span class="token punctuation">(</span><span class="token punctuation">)</span>     nonebot<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">)</span></code></pre><p> if <code>__name__ == &#39;__main__&#39;</code> 语句块的这几行代码将依次：</p><ol><li>使用默认配置初始化 NoneBot 包  </li><li>加载 NoneBot 内置的插件  </li><li>在地址 127.0.0.1:8080 运行 NoneBot</li></ol><p>运行后会产生如下日志：</p><pre><code>[2019-01-26 14:24:15,984 nonebot] INFO: Succeeded to import &quot;nonebot.plugins.base&quot;[2019-01-26 14:24:15,987 nonebot] INFO: Running on 127.0.0.1:8080Running on https://127.0.0.1:8080 (CTRL + C to quit)</code></pre><blockquote><p>除此之外可能有一些红色的警告信息和 <code>ASGI Framework Lifespan error</code> 等，可以忽略。</p></blockquote></li><li><p>启用CoolQ HTTP API后插件将开启一个 HTTP 服务器来接收请求，默认监听 <code>0.0.0.0:5700</code>，首次启用会生成一个默认配置文件，在 酷Q 的 <code>data\app\io.github.richardchien.coolqhttpapi\config</code> 文件夹中，文件名为 <code>&lt;user_id&gt;.json</code>（<code>&lt;user_id&gt;</code> 为登录的 QQ 号），使用 JSON 格式填写,详见<a href="https://cqhttp.cc/docs/4.13/#/Configuration" target="_blank" rel="noopener">配置</a>。修改这个文件，修改如下配置项（如果不存在相应字段则添加）：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>   <span class="token property">"ws_reverse_api_url"</span><span class="token operator">:</span> <span class="token string">"ws://127.0.0.1:8080/ws/api/"</span><span class="token punctuation">,</span>   <span class="token property">"ws_reverse_event_url"</span><span class="token operator">:</span> <span class="token string">"ws://127.0.0.1:8080/ws/event/"</span><span class="token punctuation">,</span>   <span class="token property">"use_ws_reverse"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><blockquote><p>如果配置文件中需要使用中文或其它非 ASCII 字符，则必须使用 UTF-8 without BOM 编码保存文件。</p></blockquote><p> 修改之后，在 酷Q 的应用菜单中重启 CoolQ HTTP API 插件，或直接重启 酷Q，以使新的配置文件生效。</p><p> 一旦新的配置文件正确生效之后，NoneBot 所在的控制台（如果正在运行的话）应该会输出类似下面的内容（两条访问日志）：</p><pre><code> [2019-01-26 16:23:17,159] 172.29.84.18:50639 GET /ws/api/ 1.1 101 - 986 [2019-01-26 16:23:17,201] 172.29.84.18:53839 GET /ws/event/ 1.1 101 - 551</code></pre><p> 这表示 CoolQ HTTP API 插件已经成功地连接上了 NoneBot，与此同时，插件的日志文件中也会输出反向 WebSocket 连接成功的日志。</p></li><li><p>现在，尝试向你的 QQ 机器人账号发送如下内容：</p><pre class=" language-text"><code class="language-text">/echo 你好，世界</code></pre><p>到这里如果一切都没有问题，你应该会收到机器人给你回复了<code>你好，世界</code>。这一历史性的对话标志着你已经成功地运行了一个 NoneBot 的最小实例。进阶操作可以参照官方文档。</p></li></ol><h2 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h2><p>我们已经运行了一个最小的 NoneBot 实例，在看着 QQ 机器人回复了自己的消息的同时，这是如何实现的？具体来说，NoneBot、CoolQ HTTP API 插件、酷Q，这三者是如何协同工作的？本章将对这个问题做一个初步解答。</p><h3 id="一切从酷Q开始"><a href="#一切从酷Q开始" class="headerlink" title="一切从酷Q开始"></a>一切从酷Q开始</h3><p>酷Q扮演着「无头 QQ 客户端」的角色，一切的消息、通知、请求的发送和接收，最根本上都是由它来完成的，我们的最小 NoneBot 实例也不例外。</p><p>首先，我们向机器人发送的 <code>/echo 你好，世界</code> 进入腾讯的服务器，后者随后会把消息推送给 酷Q，就像推送给一个真正的 QQ 客户端一样。到这里，酷Q 就已经收到了我们发送的消息了。</p><h3 id="进入-CoolQ-HTTP-API-插件"><a href="#进入-CoolQ-HTTP-API-插件" class="headerlink" title="进入 CoolQ HTTP API 插件"></a>进入 CoolQ HTTP API 插件</h3><p>酷Q 在收到消息之后，按优先级依次将消息转交给已启用的各插件处理，在我们的例子中，只有一个插件，就是 CoolQ HTTP API 插件。</p><p>CoolQ HTTP API 插件收到消息后，会将其包装为一个统一的事件格式，并对消息内容进行一个初步的处理，例如编码转换、数组化、CQ 码增强等，这里的细节目前为止不需要完全明白，在需要的时候，可以去参考 CoolQ HTTP API 插件的文档。</p><p>接着，插件把包装好的事件转换成 JSON 格式，并通过「反向 WebSocket」发送给 NoneBot。这里的「反向 WebSocket」，连接的就是我们在 CoolQ HTTP API 插件的配置中指定的 ws_reverse_url，即 NoneBot 监听的 WebSocket 入口。</p><blockquote><p><strong>提示</strong></p><p>「反向 WebSocket」是 CoolQ HTTP API 插件的一种通信方式，表示插件作为客户端，主动去连接配置文件中指定的 <code>ws_reverse_url</code>。除此之外还有 HTTP、（正向）WebSocket 等方式。</p></blockquote><h3 id="NoneBot-出场"><a href="#NoneBot-出场" class="headerlink" title="NoneBot 出场"></a>NoneBot 出场</h3><p>CoolQ HTTP API 插件通过反向 WebSocket 将消息事件发送到 NoneBot 后，NoneBot 就开始了它的处理流程。</p><h4 id="初步处理"><a href="#初步处理" class="headerlink" title="初步处理"></a>初步处理</h4><p>首先 NoneBot 利用底层的 aiocqhttp 区分事件类型，并通知到相应的函数，本例中，相应的函数就是负责处理消息的函数。</p><p>负责处理消息的函数会尝试把消息作为一个命令来解析，根据默认配置，它发现消息内容 <code>/echo 你好，世界</code> 符合命令的一个特征——以 <code>/</code> 开头，剥离掉这个起始字符之后，消息变为 <code>echo 你好，世界</code>，紧接着，它读取第一个空白字符之前的内容，即 <code>echo</code>，将其理解为命令的名字。</p><blockquote><p><strong>提示</strong></p><p>实际上，它还会使用配置中的分隔符对 <code>echo</code> 做一个分割，不过这里分割完也只有一个部分，所以实际命令名字为 <code>(&#39;echo&#39;,)</code>，形式是一个 Python 元组；而如果我们发送的命令是 <code>note.add</code>，分割之后就是 <code>(&#39;note&#39;, &#39;add&#39;)</code>。</p></blockquote><h4 id="理解最小实例的代码"><a href="#理解最小实例的代码" class="headerlink" title="理解最小实例的代码"></a>理解最小实例的代码</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> nonebot<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    nonebot<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>    nonebot<span class="token punctuation">.</span>load_builtin_plugins<span class="token punctuation">(</span><span class="token punctuation">)</span>    nonebot<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">)</span></code></pre><p>第 4 行的 <code>nonebot.init()</code> 首先初始化 <code>nonebot</code> 包，这是无论如何都需要写的一行代码，并且必须在使用 NoneBot 的任何功能之前调用。</p><p>随后，<code>nonebot.load_builtin_plugins()</code> 加载了 NoneBot 的内置插件，这一步不是必须的，尤其在你编写了自己的插件之后，可能会不再需要内置插件。</p><p>NoneBot 的内置插件只包含了两个命令，<code>echo</code> 和 <code>say</code>，两者的功能都是重复发送者的话，区别在于，<code>echo</code> 命令任何人都可以调用（不限制权限），但只能原样重复消息，不能手动指定要发送的 CQ 码，<code>say</code> 命令只有超级用户（通常是你自己，需要在配置中指定）可以调用，可以在消息中指定要发送的 CQ 码。</p><blockquote><p>可以通过在配置中设置<code>SUPERUSERS = {QQid}</code>来获取超级用户权限。</p></blockquote><p>最后，<code>nonebot.run(host=&#39;127.0.0.1&#39;, port=8080)</code> 让 NoneBot 跑在了地址 <code>127.0.0.1:8080</code> 上，向 CoolQ HTTP API 插件提供 <code>/</code>、<code>/ws/</code>、<code>/ws/event/</code>、<code>/ws/api/</code> 四个入口，在我们的反向 WebSocket 配置中，插件利用了第二个入口。</p><h4 id="命令处理器"><a href="#命令处理器" class="headerlink" title="命令处理器"></a>命令处理器</h4><p><code>echo</code> 命令处理器的代码其实非常简单，如下：</p><pre class=" language-python"><code class="language-python">@on_command<span class="token punctuation">(</span><span class="token string">'echo'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">echo</span><span class="token punctuation">(</span>session<span class="token punctuation">:</span> CommandSession<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">await</span> session<span class="token punctuation">.</span>send<span class="token punctuation">(</span>session<span class="token punctuation">.</span>state<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span> <span class="token operator">or</span> session<span class="token punctuation">.</span>current_arg<span class="token punctuation">)</span></code></pre><p>消息处理函数将剩余部分<code>（你好，世界）</code>当做命令的参数，并通过命令名获取到对应的命令处理器，然后把参数、消息事件中附带的其它信息一起打包成一个 Session 对象（具体来说，是一个 <code>CommandSession</code> 类的对象），传给命令处理器来调用它。</p><h3 id="再次进入-CoolQ-HTTP-API-插件"><a href="#再次进入-CoolQ-HTTP-API-插件" class="headerlink" title="再次进入 CoolQ HTTP API 插件"></a>再次进入 CoolQ HTTP API 插件</h3><p>命令处理器在调用 <code>session.send()</code> 之后，NoneBot 把消息内容发送给了 CoolQ HTTP API 插件那边已连接的反向 WebSocket 客户端，同时告诉它要把消息发送到和收到消息相同的地方（即接收到消息所在的群组、讨论组或私聊）。CoolQ HTTP API 插件明白了 NoneBot 的要求之后，会对消息做一些必要的处理，然后按照指示调用 酷Q 提供的相应接口。</p><h3 id="一切又在-酷Q-结束"><a href="#一切又在-酷Q-结束" class="headerlink" title="一切又在 酷Q 结束"></a>一切又在 酷Q 结束</h3><p>酷Q 收到 CoolQ HTTP API 插件的接口调用之后，将消息内容发送给腾讯的服务器，就像一个真正的 QQ 客户端一样，于是你就收到了 QQ 机器人发来的消息了。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://nonebot.cqp.moe/guide/" target="_blank" rel="noopener">NoneBot 文档</a></li><li><a href="https://cqhttp.cc/docs/4.13/#/" target="_blank" rel="noopener">CoolQ HTTP API 插件文档</a></li><li><a href="https://docs.cqp.im/dev/" target="_blank" rel="noopener">酷Q 开发文档</a></li><li><a href="https://cqp.cc/t/34558" target="_blank" rel="noopener">酷Q on Docker</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绕过SNI审查直连Pixiv</title>
      <link href="/2020/01/31/rao-guo-sni-shen-cha-zhi-lian-pixiv/"/>
      <url>/2020/01/31/rao-guo-sni-shen-cha-zhi-lian-pixiv/</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>2020/1/31的情况:<code>www.pixiv.net</code>有污染和阻断故无法通过常规手段访问，其APP端的<code>app-api.pixiv.net</code>只有污染，图床<code>i.pximg.net</code>可正常访问。因此，我们可以通过Cloudflare的公众DNS获取真实ip，从而进行访问<code>app-api.pixiv.net</code>，从其中的api中进行登录与查询，最终实现从图库中获取图片。(从图库中获取图片需要refer为Pixiv网域)</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>先写代码查询DNS：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># encoding = utf-8</span><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    hostname <span class="token operator">=</span> <span class="token string">"app-api.pixiv.net"</span>    url <span class="token operator">=</span> <span class="token string">"https://1.0.0.1/dns-query"</span> <span class="token comment" spellcheck="true"># 查询DNS</span>    params <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'ct'</span><span class="token punctuation">:</span> <span class="token string">'application/dns-json'</span><span class="token punctuation">,</span>        <span class="token string">'name'</span><span class="token punctuation">:</span> hostname<span class="token punctuation">,</span>        <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'A'</span><span class="token punctuation">,</span>        <span class="token string">'do'</span><span class="token punctuation">:</span> <span class="token string">'false'</span><span class="token punctuation">,</span>        <span class="token string">'cd'</span><span class="token punctuation">:</span> <span class="token string">'false'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>params<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Out：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    'Status'<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    'TC'<span class="token operator">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>    'RD'<span class="token operator">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>    'RA'<span class="token operator">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>    'AD'<span class="token operator">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>    'CD'<span class="token operator">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>    'Question'<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        'name'<span class="token operator">:</span> 'app-api.pixiv.net.'<span class="token punctuation">,</span>        'type'<span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    'Answer'<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>            'name'<span class="token operator">:</span> 'app-api.pixiv.net.'<span class="token punctuation">,</span>            'type'<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            'TTL'<span class="token operator">:</span> <span class="token number">150</span><span class="token punctuation">,</span>            'data'<span class="token operator">:</span> '<span class="token number">210.140</span>.<span class="token number">131.220</span>'        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            'name'<span class="token operator">:</span> 'app-api.pixiv.net.'<span class="token punctuation">,</span>            'type'<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            'TTL'<span class="token operator">:</span> <span class="token number">150</span><span class="token punctuation">,</span>            'data'<span class="token operator">:</span> '<span class="token number">210.140</span>.<span class="token number">131.223</span>'        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            'name'<span class="token operator">:</span> 'app-api.pixiv.net.'<span class="token punctuation">,</span>            'type'<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            'TTL'<span class="token operator">:</span> <span class="token number">150</span><span class="token punctuation">,</span>            'data'<span class="token operator">:</span> '<span class="token number">210.140</span>.<span class="token number">131.225</span>'        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>显然，获取其中一个IP即可。接下来尝试登录：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimeclient_id <span class="token operator">=</span> <span class="token string">'MOBrBDS8blbauoSck0ZfDbtuzpyT'</span> <span class="token comment" spellcheck="true"># 假装APP应用登录</span>client_secret <span class="token operator">=</span> <span class="token string">'lsACyCD94FhDUtGTXi3QzcFE2uU1hqtDaKeqrdwj'</span>hash_secret <span class="token operator">=</span> <span class="token string">'28c1fdd170a5204386cb1313c7077b34f83e4aaf4aa829ce78c231e05b0bae2c'</span>local_time <span class="token operator">=</span> datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%dT%H:%M:%S+00:00'</span><span class="token punctuation">)</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'host'</span><span class="token punctuation">:</span> <span class="token string">'oauth.secure.pixiv.net'</span><span class="token punctuation">,</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'PixivAndroidApp/5.0.64 (Android 6.0)'</span><span class="token punctuation">,</span>    <span class="token string">'X-Client-Time'</span><span class="token punctuation">:</span> local_time<span class="token punctuation">,</span>    <span class="token string">'X-Client-Hash'</span><span class="token punctuation">:</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">(</span>local_time <span class="token operator">+</span> hash_secret<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'en-us'</span><span class="token punctuation">}</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'get_secure_url'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">'client_id'</span><span class="token punctuation">:</span> client_id<span class="token punctuation">,</span>    <span class="token string">'client_secret'</span><span class="token punctuation">:</span> client_secret<span class="token punctuation">,</span>    <span class="token string">'grant_type'</span><span class="token punctuation">:</span> <span class="token string">'password'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#认证类型，有token与password两种</span>    <span class="token string">'username'</span><span class="token punctuation">:</span> pixiv_id<span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 用户名</span>    <span class="token string">'password'</span><span class="token punctuation">:</span> password <span class="token comment" spellcheck="true"># 密码</span><span class="token punctuation">}</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://210.140.131.220'</span> <span class="token operator">+</span> <span class="token string">'/auth/token'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> stream<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                            verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p>Out:</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"response"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"access_token"</span><span class="token operator">:</span> <span class="token string">"omWoN1QUQ4OF9ENF4LTHObdR9K5eB1COACnOavlG5J1"</span><span class="token punctuation">,</span>        <span class="token property">"expires_in"</span><span class="token operator">:</span> <span class="token number">3600</span><span class="token punctuation">,</span>        <span class="token property">"token_type"</span><span class="token operator">:</span> <span class="token string">"bearer"</span><span class="token punctuation">,</span>        <span class="token property">"scope"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"refresh_token"</span><span class="token operator">:</span> <span class="token string">"3ysYSnD71aFttkt1XgBr-XxwjiMOGtdBmaAZbYFT2e1"</span><span class="token punctuation">,</span>        <span class="token property">"user"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"profile_image_urls"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"px_16x16"</span><span class="token operator">:</span> <span class="token string">"https:\/\/i.pximg.net\/user-profile\/img\/2018\/02\/11\/13\/24\/32\/13810489_848de9cbfdb78a44b1319634ccee5d31_16.jpg"</span><span class="token punctuation">,</span>                <span class="token property">"px_50x50"</span><span class="token operator">:</span> <span class="token string">"https:\/\/i.pximg.net\/user-profile\/img\/2018\/02\/11\/13\/24\/32\/13810489_848de9cbfdb78a44b1319634ccee5d31_50.jpg"</span><span class="token punctuation">,</span>                <span class="token property">"px_170x170"</span><span class="token operator">:</span> <span class="token string">"https:\/\/i.pximg.net\/user-profile\/img\/2018\/02\/11\/13\/24\/32\/13810489_848de9cbfdb78a44b1319634ccee5d31_170.jpg"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"11111111"</span><span class="token punctuation">,</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Ryan"</span><span class="token punctuation">,</span>            <span class="token property">"account"</span><span class="token operator">:</span> <span class="token string">"user_ynvp1111"</span><span class="token punctuation">,</span>            <span class="token property">"mail_address"</span><span class="token operator">:</span> <span class="token string">"123456789@qq.com"</span><span class="token punctuation">,</span>            <span class="token property">"is_premium"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"x_restrict"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"is_mail_authorized"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"device_token"</span><span class="token operator">:</span> <span class="token string">"4fae17434ceedc22a7da75ca27a1a7b1"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>顺便收到了一条Pixiv事务局发来的email，表明从中国登录。由上绕过SNI，成功登录并获取了bearer token,下次可以直接填入登录。</p><h2 id="完善代码"><a href="#完善代码" class="headerlink" title="完善代码"></a>完善代码</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># encoding = utf-8</span><span class="token keyword">import</span> hashlib<span class="token keyword">import</span> requests<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    hostname <span class="token operator">=</span> <span class="token string">"app-api.pixiv.net"</span>    timeout <span class="token operator">=</span> <span class="token number">3</span>    <span class="token comment" spellcheck="true"># url = "https://cloudflare-dns.com/dns-query"</span>    url <span class="token operator">=</span> <span class="token string">"https://1.0.0.1/dns-query"</span>    params <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'ct'</span><span class="token punctuation">:</span> <span class="token string">'application/dns-json'</span><span class="token punctuation">,</span>        <span class="token string">'name'</span><span class="token punctuation">:</span> hostname<span class="token punctuation">,</span>        <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'A'</span><span class="token punctuation">,</span>        <span class="token string">'do'</span><span class="token punctuation">:</span> <span class="token string">'false'</span><span class="token punctuation">,</span>        <span class="token string">'cd'</span><span class="token punctuation">:</span> <span class="token string">'false'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>params<span class="token punctuation">,</span> timeout<span class="token operator">=</span>timeout<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 部分地区可能无法访问1.0.0.1，此时尝试域名解析</span>        url <span class="token operator">=</span> <span class="token string">"https://cloudflare-dns.com/dns-query"</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>params<span class="token punctuation">,</span> timeout<span class="token operator">=</span>timeout<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># response = requests.get("http://"+"210.140.131.220", params=params,headers=header())</span>    <span class="token comment" spellcheck="true"># print(response.text)</span>    client_id <span class="token operator">=</span> <span class="token string">'MOBrBDS8blbauoSck0ZfDbtuzpyT'</span>    client_secret <span class="token operator">=</span> <span class="token string">'lsACyCD94FhDUtGTXi3QzcFE2uU1hqtDaKeqrdwj'</span>    hash_secret <span class="token operator">=</span> <span class="token string">'28c1fdd170a5204386cb1313c7077b34f83e4aaf4aa829ce78c231e05b0bae2c'</span>    local_time <span class="token operator">=</span> datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%dT%H:%M:%S+00:00'</span><span class="token punctuation">)</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'host'</span><span class="token punctuation">:</span> <span class="token string">'oauth.secure.pixiv.net'</span><span class="token punctuation">,</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'PixivAndroidApp/5.0.64 (Android 6.0)'</span><span class="token punctuation">,</span>        <span class="token string">'X-Client-Time'</span><span class="token punctuation">:</span> local_time<span class="token punctuation">,</span>        <span class="token string">'X-Client-Hash'</span><span class="token punctuation">:</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">(</span>local_time <span class="token operator">+</span> hash_secret<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'en-us'</span>    <span class="token punctuation">}</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'get_secure_url'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">'client_id'</span><span class="token punctuation">:</span> client_id<span class="token punctuation">,</span>        <span class="token string">'client_secret'</span><span class="token punctuation">:</span> client_secret<span class="token punctuation">,</span>        <span class="token string">'grant_type'</span><span class="token punctuation">:</span> <span class="token string">'password'</span><span class="token punctuation">,</span>        <span class="token string">'username'</span><span class="token punctuation">:</span> pixiv_id<span class="token punctuation">,</span>        <span class="token string">'password'</span><span class="token punctuation">:</span> password    <span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"https://"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'Answer'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'/auth/token'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>                             data<span class="token operator">=</span>data<span class="token punctuation">,</span> stream<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                             verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p>登陆后可通过<code>app-api.pixiv.net</code>的接口进行各类操作，IP已经获取，因此只需在IP上进行相对路径即可。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>常见的API及JSON格式：</p><ul><li><a href="https://github.com/upbit/pixivpy/wiki/sniffer#get-v1searchworksjson" target="_blank" rel="noopener">PixivPy</a></li><li><a href="http://blog.imaou.com/migrate_pixivpy_sapi_to_papi/" target="_blank" rel="noopener">简介</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pixiv网站相关</title>
      <link href="/2020/01/30/pixiv-wang-zhan-xiang-guan-proj/"/>
      <url>/2020/01/30/pixiv-wang-zhan-xiang-guan-proj/</url>
      
        <content type="html"><![CDATA[<p>Pixiv作为一个多灾多难的网站，先后经历了DNS，SNI等阻断，目前已经不能用host方法访问了。不过，由于其IP本身并没有被封禁，借助平时做网站常用反代理服务器 Nginx 即可以完美绕过 SNI 审查。本文记录了一些围绕Pixiv网站的项目&amp;教程，从中也可以学到很多服务端的知识。</p><h2 id="Pixiv是什么"><a href="#Pixiv是什么" class="headerlink" title="Pixiv是什么"></a>Pixiv是什么</h2><p>Pixiv，是一个主要由日本艺术家所组成的虚拟社群，新兴的日本同人画、插画作品分享站点。pixiv目的是提供一个能让艺术家发表他们的插图，并透过评级系统反应其他用户意见之处，网站以用户投稿的原创的图像为中心，辅以标签、书签、作品回应、排行榜等功能形成具有其特色的社交网络。（不是大众的P站哦）</p><p>简而言之，就是有好多ACG大佬和他们的大图~</p><h2 id="访问Pixiv"><a href="#访问Pixiv" class="headerlink" title="访问Pixiv"></a>访问Pixiv</h2><p>一开始，人们可以直接访问Pixiv。</p><p>后来，DNS封锁后，人们通过修改sys的host文件访问Pixiv。</p><p>再后来，Great Firewall（GFW）升级封锁策略，采用了新型的 SNI 阻断方法，hosts 和 DNS 失效，没有技术的人访问不了Pixiv。（流下了没技术的泪水）</p><blockquote><p>SNI(Sever Name Indication)中文名为服务器名称指示，是对 SSL/TLS 协议的扩展，允许在单个 IP 地址上承载多个 SSL 证书。SNI 的实现方式是将 HTTP 头插入到 SSL 的握手中，提交请求的 Host 信息，使得服务器能够切换到正确的域并返回相应的正确证书。即，在连接到服务器建立SSL链接之前先发送要访问站点的域名（Hostname），这样服务器根据这个域名返回一个合适的证书。</p></blockquote><p>现状是<a href="http://www.pixiv.net有污染和阻断，app-api.pixiv.net只有污染，i.pximg.net正常。因此，我们也可以通过app-api.pixiv.net实现登录与作品查询。" target="_blank" rel="noopener">www.pixiv.net有污染和阻断，app-api.pixiv.net只有污染，i.pximg.net正常。因此，我们也可以通过app-api.pixiv.net实现登录与作品查询。</a></p><p>目前几种访问方法：</p><ol><li>VPN</li><li><a href="https://2heng.xin/2017/09/19/pixiv/" target="_blank" rel="noopener">Nginx本地代理</a></li><li><a href="https://moe.best/technology/pixiv-proxy.html" target="_blank" rel="noopener">服务器反向代理</a></li><li>通过修改 OkHttp 的 SSLSocket 实现绕过 SNI 审查（即旁路阻断）直连 Pixiv 的功能(强烈安利)<ul><li><a href="/%E7%BB%95%E8%BF%87SNI%E5%AE%A1%E6%9F%A5%E7%9B%B4%E8%BF%9EPixiv/">一个简单Demo讲解</a></li><li><a href="https://github.com/Notsfsssf/Pix-EzViewer/tree/master/app/src/main/java/com/perol/asdpl/pixivez/networks" target="_blank" rel="noopener">Java</a></li><li><a href="https://github.com/upbit/pixivpy/blob/master/example_bypass_sni.py" target="_blank" rel="noopener">Python</a><br>&lt;!–</li><li><a href="https://github.com/Tsuk1ko/pxder/blob/master/src/pixiv-api-client-mod.js" target="_blank" rel="noopener">Node.js</a></li></ul></li></ol><p>–&gt;</p><ol><li>使用非大陆地区的网络</li><li>如果有的话再来补充呗</li></ol><h2 id="Pixiv相关的项目"><a href="#Pixiv相关的项目" class="headerlink" title="Pixiv相关的项目"></a>Pixiv相关的项目</h2><h3 id="PixEz"><a href="#PixEz" class="headerlink" title="PixEz"></a><a href="https://github.com/Notsfsssf/Pix-EzViewer" target="_blank" rel="noopener">PixEz</a></h3><p>一个支持免代理直连及查看动图的第三方 Pixiv Android 客户端，手感不错。</p><h3 id="pixivic"><a href="#pixivic" class="headerlink" title="pixivic"></a><a href="https://github.com/OysterQAQ/Pixiv-Illustration-Collection-Backend" target="_blank" rel="noopener">pixivic</a></h3><p>提供有限的pixiv排行查看与免费高级会员(热门排序)搜索的站点</p><h3 id="pixiv图片代理"><a href="#pixiv图片代理" class="headerlink" title="pixiv图片代理"></a><a href="https://pixiv.cat/" target="_blank" rel="noopener">pixiv图片代理</a></h3><p>pixiv图片伺服器连结的反向代理，只需修改网域部分即可使用，还支持个人网站引用图片。</p><h3 id="Pixiv-DL"><a href="#Pixiv-DL" class="headerlink" title="Pixiv-DL"></a><a href="https://github.com/yjw1268/Pixiv-weekly" target="_blank" rel="noopener">Pixiv-DL</a></h3><p>适合python新手的Pixiv缩略图、原图下载及排行榜JSON格式API生成。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> 技术 </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fiddler手机抓包使用</title>
      <link href="/2020/01/29/fiddler-shou-ji-zhua-bao-shi-yong/"/>
      <url>/2020/01/29/fiddler-shou-ji-zhua-bao-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>手机上无法直接查看网络请求数据，需要使用抓包工具。Fiddler是一个免费的web调试代理，可以用它实现记录、查看和调试手机终端和远程服务器之间的http/https通信。</p><h2 id="PC端Fiddler使用"><a href="#PC端Fiddler使用" class="headerlink" title="PC端Fiddler使用"></a>PC端Fiddler使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><a href="https://www.telerik.com/download/fiddler" target="_blank" rel="noopener">官方网站</a></li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol><li>手机上的应用很多涉及到个人信息，采用比较安全的HTTPS加密过，而fiddler默认只捕获http会话而不抓取HTTPS报文，导致打开fiddler后就打不开https网页。<br> <strong>解决办法</strong>：打开Fiddler-&gt;Tool-&gt;Fiddler Options-&gt;HTTPS tab，勾选上并Capture HTTPS CONNECTs（捕获 HTTPS 连接）和 Decrypt HTTPS traffic （HTTPS 请求解密），并安装证书（首次使用无证书，会弹出是否信任fiddler证书和安全提示，直接点击yes就行），重启Fiddler生效。在localhost:8888中也可以安装证书。</li><li>如果想要捕获手机上的通信数据，就需要手机连接上Fiddler代理，而Fiddler默认是不允许其他设备进行连接的。<br> <strong>解决办法</strong>：点击 Fiddler-&gt;Tools -&gt; Options，在 Connections 面板选中 Allow remote computers to connect 允许其他设备连接（此操作需重启Fiddler生效）。</li><li>修改手机WLAN需先代理查看电脑ip地址。<br> <strong>解决办法</strong>：可通过cmd命令行输入<code>ipconfig</code>查询。也可以将鼠标置于fiddler右上角的online图标中显示电脑的ip地址。</li></ol><h2 id="手机端Fiddler使用"><a href="#手机端Fiddler使用" class="headerlink" title="手机端Fiddler使用"></a>手机端Fiddler使用</h2><h3 id="证书配置"><a href="#证书配置" class="headerlink" title="证书配置"></a>证书配置</h3><p>需要在移动终端（手机或pad）上指定代理服务器为Fiddler所在主机IP（需要处于同一网络），端口默认8888（即在PC端配置的端口）。</p><ol><li>要保证手机和安装有fiddler的电脑处在同一局域网内，手机能ping通电脑。<br> <strong>解决办法</strong>：家用或办公环境把PC和手机WLAN连接上同一个路由器的无线SSID获取到同一网段内的IP地址即可。在你的手机上打开你连接的 wifi高级设置，设置http代理服务器和端口,IP<br>设置为DHCP。这里的服务器地址就是PC端刚找到的IPv4地址，端口默认8888。</li><li>在手机上需要安装Fiddler根证书，因为Fiddler是通过自己生成的证书对网络请求重新签名进行https会话解密的，如果不安装证书的话只能抓取HTTP请求。<br> <strong>解决办法</strong>：打开手机浏览器，输入Fiddler Server地址<code>http://ipv4.fiddler:8888/</code>（因为fiddler装在PC上，所以Fiddler Server地址就是PC的IP地址，带上默认端口号8888)，或直接输入<code>http://pcip:8888/</code>。跳转到 Fiddler Echo Service 证书下载页，点击FiddlerRoot certificate下载并安装,为证书命名后点击确定。</li></ol><h3 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h3><ol><li><p>PC端Log报错：<br><code>!SecureClientPipeDirect failed: System.Security.Authentication.AuthenticationException</code>。<br> <strong>解决办法</strong>：证书未被信任，导致主机拒绝连接。解决报错的方法是将fiddler设置中 Decrypt Https traffic 选项去掉，但是这样很可能将无法抓取https包。有一个<a href="https://stackoverflow.com/questions/33382870/how-to-capture-httpstls-1-0-communications-from-android-app-with-fiddler4" target="_blank" rel="noopener">Stackflow</a>的解释：</p><blockquote><p>TLS1.0可能是Fiddler中最受支持的HTTPS协议。如果发生报错，相关的Android应用程序已启用Certificate Pinning（证书锁定）。如果您非常想避免锁定，可以越狱设备并使用许多第三方工具箱中的任何一个禁用锁定代码即可。</p></blockquote><p> 关于证书固定：</p><blockquote><p>极少数HTTPS客户端应用程序支持一种称为“证书固定”的功能，该功能会将客户端应用程序硬编码为仅接受一个特定的证书。当证书固定的应用程序通过CONNECT隧道与Fiddler进行HTTPS握手时，它将检查响应的证书，并在发现Fiddler生成的证书时拒绝发送任何进一步的请求。不幸的是，没有通用的解决方法可以解决此问题。</p></blockquote></li><li><p>手机端打不开Fiddler Server地址，或手机设置代理后，无法访问网络了，如断网般。<br> <strong>解决办法</strong>：</p><ol><li>在PC端打开注册表，在HKEY_CURRENT_USER\SOFTWARE\Microsoft\Fiddler2下创建一个DWORD，值设置为80（十进制）</li><li>编写FiddlerScript rule，点击Rules &gt; Customize Rules,用ctr+f查找到OnBeforeRequest方法添加一行代码:<br><code>if (oSession.host.toLowerCase() == &quot;webserver:8888&quot;){ oSession.host = &quot;webserver:80&quot;;}</code><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//pass</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m_AlwaysFresh <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>oSession<span class="token punctuation">.</span>oRequest<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span><span class="token string">"If-Modified-Since"</span><span class="token punctuation">)</span> <span class="token operator">||</span> oSession<span class="token punctuation">.</span>oRequest<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span><span class="token string">"If-None-Match"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         oSession<span class="token punctuation">.</span><span class="token function">utilCreateResponseAndBypassServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         oSession<span class="token punctuation">.</span>responseCode <span class="token operator">=</span> <span class="token number">304</span><span class="token punctuation">;</span>         oSession<span class="token punctuation">[</span><span class="token string">"ui-backcolor"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Lavender"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>oSession<span class="token punctuation">.</span>host<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"webserver:8888"</span><span class="token punctuation">)</span><span class="token punctuation">{</span> oSession<span class="token punctuation">.</span>host <span class="token operator">=</span> <span class="token string">"webserver:80"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//pass</span></code></pre></li></ol></li></ol><h3 id="还原手机状态"><a href="#还原手机状态" class="headerlink" title="还原手机状态"></a>还原手机状态</h3><p>抓包结束后，手动还原手机状态，方法如下（不同机型可能有些微差别）：</p><ol><li>停止电脑对手机的网络监控：系统设置-WLAN，长按wifi修改网络，高级选项找到代理，去掉手动代理即可；</li><li>删除手机中证书：安卓系统设置-系统-设备安全-受信任的凭据-用户 ，点击证书删除即可；</li></ol>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo框架使用笔记</title>
      <link href="/2020/01/27/hexo-kuang-jia-shi-yong-bi-ji/"/>
      <url>/2020/01/27/hexo-kuang-jia-shi-yong-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>Hexo是一个快速、简洁且高效的博客框架。只需要在Node.js上一句语句即可完场部署。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li>Node.js (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)  </li><li>Git</li></ul><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g</code></pre><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><pre class=" language-bash"><code class="language-bash">$ hexo init <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ <span class="token function">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ <span class="token function">npm</span> <span class="token function">install</span></code></pre><p>新建完成后，指定文件夹的目录如下：</p><pre><code>.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes</code></pre><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>网站的配置信息，您可以在此配置大部分的参数。</p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>应用程序的信息。其中EJS, Stylus 和 Markdown renderer 已默认安装。</p><h3 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h3><p>模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p><h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p>主题文件夹。Hexo 会根据主题来生成静态页面。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsDelivr使用文档</title>
      <link href="/2020/01/27/jsdelivr-shi-yong-wen-dang/"/>
      <url>/2020/01/27/jsdelivr-shi-yong-wen-dang/</url>
      
        <content type="html"><![CDATA[<p>jsDelivr – Open Source CDN, free, fast, and reliable</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ul><li><p>npm：</p><pre><code>  // load any project hosted on npm  https://cdn.jsdelivr.net/npm/package@version/file  // load jQuery v3.2.1  https://cdn.jsdelivr.net/npm/jquery@3.2.1/dist/jquery.min.js  // use a version range instead of a specific version  https://cdn.jsdelivr.net/npm/jquery@3.2/dist/jquery.min.js  https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js  // omit the version completely to get the latest one  // you should NOT use this in production  https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js  // add &quot;.min&quot; to any JS/CSS file to get a minified version  // if one doesn&#39;t exist, we&#39;ll generate it for you  https://cdn.jsdelivr.net/npm/jquery@3.2.1/src/core.min.js  // omit the file path to get the default file  https://cdn.jsdelivr.net/npm/jquery@3.2  // add / at the end to get a directory listing  https://cdn.jsdelivr.net/npm/jquery/</code></pre></li><li><p>GitHub</p><pre><code>  // load any GitHub release, commit, or branch  // note: we recommend using npm for projects that support it  https://cdn.jsdelivr.net/gh/user/repo@version/file  // load jQuery v3.2.1  https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js  // use a version range instead of a specific version  https://cdn.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.js  https://cdn.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js  // omit the version completely to get the latest one  // you should NOT use this in production  https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js  // add &quot;.min&quot; to any JS/CSS file to get a minified version  // if one doesn&#39;t exist, we&#39;ll generate it for you  https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js  // add / at the end to get a directory listing  https://cdn.jsdelivr.net/gh/jquery/jquery/</code></pre></li><li><p>WordPress</p><pre><code>  // load any plugin from the WordPress.org plugins SVN repo  https://cdn.jsdelivr.net/wp/plugins/project/tags/version/file  // load an exact version  https://cdn.jsdelivr.net/wp/plugins/wp-slimstat/tags/4.6.5/wp-slimstat.js  // load the latest version  // you should NOT use this in production  https://cdn.jsdelivr.net/wp/plugins/wp-slimstat/trunk/wp-slimstat.js  // load any theme from the WordPress.org themes SVN repo  https://cdn.jsdelivr.net/wp/themes/project/version/file  // load an exact version  https://cdn.jsdelivr.net/wp/themes/twenty-eightteen/1.7/assets/js/html5.js  // add &quot;.min&quot; to any JS/CSS file to get a minified version  // if one doesn&#39;t exist, we&#39;ll generate it for you</code></pre></li></ul><h2 id="具体说明"><a href="#具体说明" class="headerlink" title="具体说明"></a>具体说明</h2><p>以Github为例，对于用户Ryan创建的仓库Ryan.github.io来说，发布了release为v1.0，则在仓库中img/0.jpg的CDN的url对比文档为：  </p><pre><code>https://cdn.jsdelivr.net/gh/Ryan/Ryan.github.io@v1.0/img/0.jpg https://cdn.jsdelivr.net/gh/user/repo@version/file</code></pre><p>其他用法类似。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SAI2的安装与初始化</title>
      <link href="/2020/01/23/sai2-de-an-zhuang-yu-chu-shi-hua/"/>
      <url>/2020/01/23/sai2-de-an-zhuang-yu-chu-shi-hua/</url>
      
        <content type="html"><![CDATA[<p>本文转载自<a href="https://www.saier.me/sai2/" target="_blank" rel="noopener">夜月七境-[简繁中文]SAI2进度报告版</a>,采用<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh" target="_blank" rel="noopener">知识共享(Creative Commons)署名-非商业性使用-禁止演绎 4.0</a>进行许可。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>最新版 SAI2 继承设置的问题请看这篇文章<a href="https://www.saier.me/import-sai-settings/" target="_blank" rel="noopener">《详解新版SAI2的继承设置和导入笔刷》</a>。</p><ul><li><a href="https://share.weiyun.com/6744fd38418d294b863098031477e64a" target="_blank" rel="noopener">腾讯微云</a>（有外链次数限制，下载需要保存到自己的微云里）</li><li><a href="https://pan.baidu.com/share/init?surl=jHDb8t4" target="_blank" rel="noopener">百度网盘</a>（提取密码：qxx3）</li></ul><h2 id="有报错请注意"><a href="#有报错请注意" class="headerlink" title="有报错请注意"></a>有报错请注意</h2><ul><li>WinTab 驱动返回了错误，一般是数位板驱动和软件不兼容，可以尝试重装和更新驱动来解决。或者进入 SAI2 的设置（帮助 -&gt; 设置 -&gt; 数位板），试下改成其他 API 方式。</li><li>打开和保存文件的时候报错，可能是 SAI2 被 Windows Defender 之类的杀毒软件禁止了文件访问权限，或者系统本身有问题，临时解决可以关掉文件菜单里的「总是使用文件查看器」。</li></ul><h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><h3 id="关于-SAI2"><a href="#关于-SAI2" class="headerlink" title="关于 SAI2"></a>关于 SAI2</h3><p>如今，SAI Ver.2 的开发正进展顺利。由于在 Ver.1 上新增功能的代价太大了，所以 Ver.1 的预定新增功能全部取消，它们将全部改为在 Ver.2 上实现。由于取消 Ver.1 的预定新增功能违背了作者之前承诺，作为补偿，Ver.1 的用户可无偿升级 Ver.2（注意，这是作者原话，只针对在官网购买完整授权的用户）。</p><h3 id="SAI2-的进度报告"><a href="#SAI2-的进度报告" class="headerlink" title="SAI2 的进度报告"></a>SAI2 的进度报告</h3><p>现在公开的测试版已经拥有跟 Ver.1 几乎一样的功能。由于是开发版本，自然很可能会有BUG，所以你如果想使用稳定的软件，还是不要用这个开发版了。另外，这个版本也不是面向电脑菜鸟用户的。如果你不熟悉电脑的基本知识和操作的话，请不要使用这个版本。</p><h3 id="让画笔接近-Ver-1-手感的方法-2017-07-27版以后"><a href="#让画笔接近-Ver-1-手感的方法-2017-07-27版以后" class="headerlink" title="让画笔接近 Ver.1 手感的方法(2017-07-27版以后)"></a>让画笔接近 Ver.1 手感的方法(2017-07-27版以后)</h3><p>2016-03-17版开始，画笔工具面板「其他」的轮廓硬度设置为 0，浓度增幅设置为 100，并启用了「Ver1笔压特性」的话，就会调整到和 Ver.1 接近的手感。<strong>可以的话，请按照下列的步骤重新创建画笔工具并设置「浓度增幅」和「Ver1笔压特性」。</strong></p><ol><li><p>在画笔工具的图标上单击右键，从菜单中选择删除<br>（因为动过设置的地方太多，会有些奇怪的问题，所以最好是删除掉。如果想保留当前的设置，可以按住 Ctrl 并拖动工具的图标，把它移动到别的空槽里）</p></li><li><p>在空槽上单击右键，从菜单中选择画笔工具</p></li><li><p>打开工具面板的「其他」，将「轮廓硬度」设置为 0，「浓度增幅」设置为 100，并开启「Ver1笔压特性」</p></li></ol><p>你还可以按照你的喜好，打开菜单的「帮助」→「设置」，把工具里的「将手抖修正为 1～15 的画笔笔画调整到跟 Ver.1 一样的感觉」开启。但是，如果你介意在快速绘画时的出入锋线尾，那就不要进行这个设置了。</p><p>另外，对于下列的差异之处，今后应该是不会调整的。</p><ul><li><p>散焦较大的画笔和纯色的画笔，浓度感基本相同<br>（Ver.1 散焦较大的时，画笔浓度会变淡）</p></li><li><p>画笔工具「维持不透明度」的效果显然易见<br>（Ver.1 只有分不出程度的效果）</p></li><li><p>画笔工具与混色相关的参数，影响的程度会有些不同<br>（Ver.1 的话，根据散焦和绘图品质的设置，参数的影响会有一定的偏差；而 Ver.2 则调整为尽量减少这种偏差。对于与混色相关的参数，需要你反复试验才能达到好的效果。）</p></li></ul><h3 id="模糊工具的制作方法"><a href="#模糊工具的制作方法" class="headerlink" title="模糊工具的制作方法"></a>模糊工具的制作方法</h3><p>原来的模糊工具是水彩笔的变种。所以你可以新建一个水彩笔工具，然后进行下列的设置，就能在 Ver.2 里新建模糊工具。</p><ul><li>[散焦] … 左边的波形</li><li>[混色] … 100</li><li>[水分量] … 100</li><li>[维持不透明度] … off</li><li>[模糊笔压] … 100%</li></ul><h3 id="最低系统要求"><a href="#最低系统要求" class="headerlink" title="最低系统要求"></a>最低系统要求</h3><p>电脑         PC/AT的兼容机<br>操作系统     Windows 2000/XP/Vista/7/8/8.1/10<br>处理器       Core 2 Duo 1.6GHz 以上<br>内存         1GB 以上<br>硬盘         20GB 以上的可用磁盘空间<br>显示器       1024x768 1677 万色<br>输入设备     支持压感的数位板 (支持WinTab API和TabletPC API)</p><h2 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h2><ul><li>原版软件：PaintTool SAI Ver.2</li><li>版权所有：SYSTEMAX Software Development</li><li>官网：<a href="http://www.systemax.jp" target="_blank" rel="noopener">http://www.systemax.jp</a></li><li>汉化：Xelloss</li></ul>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> 绘画 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
